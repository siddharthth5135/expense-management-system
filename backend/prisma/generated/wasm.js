
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  role: 'role',
  companyId: 'companyId',
  managerId: 'managerId'
};

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  country: 'country',
  currency: 'currency'
};

exports.Prisma.ExpenseScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyId: 'companyId',
  amount: 'amount',
  currency: 'currency',
  category: 'category',
  description: 'description',
  date: 'date',
  status: 'status'
};

exports.Prisma.ApprovalScalarFieldEnum = {
  id: 'id',
  expenseId: 'expenseId',
  approverId: 'approverId',
  stepNumber: 'stepNumber',
  status: 'status',
  comments: 'comments'
};

exports.Prisma.RuleScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  name: 'name',
  description: 'description',
  managerId: 'managerId',
  isManagerApprover: 'isManagerApprover',
  sequentialApproval: 'sequentialApproval',
  minimumApprovalPercent: 'minimumApprovalPercent'
};

exports.Prisma.RuleApproverScalarFieldEnum = {
  id: 'id',
  ruleId: 'ruleId',
  approverId: 'approverId',
  sequenceNo: 'sequenceNo',
  isRequired: 'isRequired'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Company: 'Company',
  Expense: 'Expense',
  Approval: 'Approval',
  Rule: 'Rule',
  RuleApprover: 'RuleApprover'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "D:\\Jp Programs\\PERN\\expense-management-system\\backend\\prisma\\generated",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "D:\\Jp Programs\\PERN\\expense-management-system\\backend\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": "../../.env",
    "schemaEnvPath": "../../.env"
  },
  "relativePath": "..",
  "clientVersion": "6.16.3",
  "engineVersion": "bb420e667c1820a8c05a38023385f6cc7ef8e83a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"./generated\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id            Int            @id @default(autoincrement())\n  name          String\n  email         String         @unique\n  password      String\n  role          String\n  company       Company?       @relation(fields: [companyId], references: [id])\n  companyId     Int?\n  managerId     Int?\n  expenses      Expense[]\n  ruleApprovers RuleApprover[]\n}\n\nmodel Company {\n  id       Int       @id @default(autoincrement())\n  name     String\n  country  String\n  currency String\n  users    User[]\n  rules    Rule[]\n  expenses Expense[]\n}\n\nmodel Expense {\n  id          Int        @id @default(autoincrement())\n  user        User       @relation(fields: [userId], references: [id])\n  userId      Int\n  company     Company    @relation(fields: [companyId], references: [id])\n  companyId   Int\n  amount      Float\n  currency    String\n  category    String\n  description String\n  date        DateTime\n  status      String     @default(\"pending\")\n  approvals   Approval[]\n}\n\nmodel Approval {\n  id         Int     @id @default(autoincrement())\n  expense    Expense @relation(fields: [expenseId], references: [id])\n  expenseId  Int\n  approverId Int\n  stepNumber Int\n  status     String  @default(\"pending\")\n  comments   String?\n}\n\nmodel Rule {\n  id                     Int            @id @default(autoincrement())\n  company                Company        @relation(fields: [companyId], references: [id])\n  companyId              Int\n  name                   String\n  description            String?\n  managerId              Int? // The manager responsible for this rule\n  isManagerApprover      Boolean        @default(false)\n  sequentialApproval     Boolean        @default(false)\n  minimumApprovalPercent Float? // e.g. 60 means at least 60% approval needed\n  approvers              RuleApprover[]\n}\n\nmodel RuleApprover {\n  id         Int     @id @default(autoincrement())\n  rule       Rule    @relation(fields: [ruleId], references: [id])\n  ruleId     Int\n  approver   User    @relation(fields: [approverId], references: [id])\n  approverId Int\n  sequenceNo Int? // Defines order (used only if sequentialApproval = true)\n  isRequired Boolean @default(false)\n}\n",
  "inlineSchemaHash": "c9d8a150db3f5fb0d193e8f200ee7bb45fcfd02bdc8bb8d2a720e075ed21a5fb",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"company\",\"kind\":\"object\",\"type\":\"Company\",\"relationName\":\"CompanyToUser\"},{\"name\":\"companyId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"managerId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"expenses\",\"kind\":\"object\",\"type\":\"Expense\",\"relationName\":\"ExpenseToUser\"},{\"name\":\"ruleApprovers\",\"kind\":\"object\",\"type\":\"RuleApprover\",\"relationName\":\"RuleApproverToUser\"}],\"dbName\":null},\"Company\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"country\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"currency\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"users\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CompanyToUser\"},{\"name\":\"rules\",\"kind\":\"object\",\"type\":\"Rule\",\"relationName\":\"CompanyToRule\"},{\"name\":\"expenses\",\"kind\":\"object\",\"type\":\"Expense\",\"relationName\":\"CompanyToExpense\"}],\"dbName\":null},\"Expense\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ExpenseToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"company\",\"kind\":\"object\",\"type\":\"Company\",\"relationName\":\"CompanyToExpense\"},{\"name\":\"companyId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"currency\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"approvals\",\"kind\":\"object\",\"type\":\"Approval\",\"relationName\":\"ApprovalToExpense\"}],\"dbName\":null},\"Approval\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"expense\",\"kind\":\"object\",\"type\":\"Expense\",\"relationName\":\"ApprovalToExpense\"},{\"name\":\"expenseId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"approverId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"stepNumber\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"comments\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"Rule\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"company\",\"kind\":\"object\",\"type\":\"Company\",\"relationName\":\"CompanyToRule\"},{\"name\":\"companyId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"managerId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isManagerApprover\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"sequentialApproval\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"minimumApprovalPercent\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"approvers\",\"kind\":\"object\",\"type\":\"RuleApprover\",\"relationName\":\"RuleToRuleApprover\"}],\"dbName\":null},\"RuleApprover\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"rule\",\"kind\":\"object\",\"type\":\"Rule\",\"relationName\":\"RuleToRuleApprover\"},{\"name\":\"ruleId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"approver\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"RuleApproverToUser\"},{\"name\":\"approverId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"sequenceNo\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isRequired\",\"kind\":\"scalar\",\"type\":\"Boolean\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

